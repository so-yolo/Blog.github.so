<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IOT-Protocol-Coap</title>
    <link href="/IOT-Protocol-coap/"/>
    <url>/IOT-Protocol-coap/</url>
    
    <content type="html"><![CDATA[<h1 id="IOT协议之Coap"><a href="#IOT协议之Coap" class="headerlink" title="IOT协议之Coap"></a>IOT协议之Coap</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇讲的是MQTT协议，今天就讲讲Coap协议吧，两者都是应用层协议，我们也是从原理加抓包分析起手</p><hr><h2 id="什么是Coap协议？"><a href="#什么是Coap协议？" class="headerlink" title="什么是Coap协议？"></a>什么是Coap协议？</h2><p>​受限应用协议（CoAP）是一种专门的web传输协议，用于受限节点和受限（例如，低功耗、有损）网络。节点通常有8位微控制器，带有少量ROM和RAM，而受限网络，如低功率无线个人区域网络（6LoWPANs）上的IPv6，通常具有高分组错误率和10s kbit&#x2F;s的典型吞吐量。<br>​该协议设计用于机器对机器（M2M）应用，如智能能源和楼宇自动化。CoAP提供应用程序端点之间的请求&#x2F;响应交互模型，支持内置的服务和资源发现，并包括Web的关键概念，如URI和Internet媒体类型。<br>​CoAP的设计目的是方便地与HTTP接口，以便与Web集成，同时满足特定的需求，如多播支持、非常低的开销以及受限环境的简单性。</p><h4 id="CoAP的核心特性"><a href="#CoAP的核心特性" class="headerlink" title="CoAP的核心特性"></a><strong>CoAP的核心特性</strong></h4><ol><li><strong>轻量高效</strong><ul><li>CoAP基于<strong>UDP协议</strong>设计，头部仅需4字节，通信开销远低于HTTP的TCP连接。</li><li>支持二进制格式报文，最小消息长度仅4字节，适合RAM&#x2F;ROM有限的设备。</li></ul></li><li><strong>RESTful架构</strong><ul><li>遵循HTTP的REST风格，使用URI标识资源，支持GET、POST、PUT、DELETE方法。</li><li>通过简化的请求&#x2F;响应模型，实现设备与云端的高效交互。</li></ul></li><li><strong>可靠性与灵活性</strong><ul><li>定义4种消息类型： <strong>CON（需确认）</strong> 、 <strong>NON（非确认）</strong> 、 <strong>ACK（确认响应）</strong> 、 <strong>RST（重置）</strong> ，通过重传机制保障可靠性。</li><li>支持<strong>IP多播</strong>，可同时向多个设备发送指令，适用于智能家居等场景。</li></ul></li><li><strong>安全性</strong><ul><li>集成DTLS（数据报传输层安全协议），提供身份认证、数据完整性和加密功能。</li><li>可通过TLS和WebSocket扩展支持更复杂的安全需求。</li></ul></li></ol><hr><h2 id="Coap的通信模型"><a href="#Coap的通信模型" class="headerlink" title="Coap的通信模型"></a>Coap的通信模型</h2><p>​CoAP的消息模型是建立在UDP端到端通信的基础上的。</p><p>​CoAP的头部为固定长度的（4个字节）二进制格式，其后是紧凑的二进制格式的选项部分，然后是数据部分(payload)，请求和响应都采用这种格式。每个消息都包含一个消息ID，用于检测重复提供传输可靠性。（这个消息ID是连续的，包含有16位，在默认的协议参数配置下，它允许每秒钟从一端到另一端传输大约250条消息）。</p><p>​通过把消息标记为CON的，可以保障消息传输的可靠性。如图2所示，在收到一个CON消息之后，接收端会发送一个带有相同消息ID(Message ID)（在这个例子中是0x7d34）的ACK。如果在默认的超时时间之后没有收到带有相同消息ID的ACK，那么它将会被重传，如果仍然没有收到ACK，此后重传超时时间会以指数级递增。当接收端无法处理一个CON消息(也无法返回一个正常的错误响应)时，它将会回应一个RST消息，而不是ACK。</p><pre><code class="hljs">                Client              Server                   |                  |                   |   CON [0x7d34]   |                   +-----------------&gt;|                   |                  |                   |   ACK [0x7d34]   |                   |&lt;-----------------+                   |                  |                 图2 可靠消息传输</code></pre><h3 id="与HTTP的对比"><a href="#与HTTP的对比" class="headerlink" title="与HTTP的对比"></a><strong>与HTTP的对比</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>CoAP</strong></th><th><strong>HTTP</strong></th></tr></thead><tbody><tr><td>传输层</td><td>UDP（低开销）</td><td>TCP（可靠但复杂）</td></tr><tr><td>消息大小</td><td>轻量（4字节起）</td><td>较大（头部冗余）</td></tr><tr><td>适用场景</td><td>受限设备、弱网环境</td><td>高带宽、稳定网络</td></tr><tr><td>多播支持</td><td>是</td><td>否</td></tr></tbody></table><hr><h2 id="Coap的报文格式与结构"><a href="#Coap的报文格式与结构" class="headerlink" title="Coap的报文格式与结构"></a>Coap的报文格式与结构</h2><ol><li><p><strong>报文结构</strong>  </p><p>CoAP报文分为<strong>头部</strong>（header）、 <strong>选项（Options）</strong> 和 <strong>负载（Payload）</strong>：  </p><ul><li><p><strong>头部</strong>：包含版本号（Ver）、消息类型（T）、令牌长度（TKL）、状态码（Code）和消息ID。  </p></li><li><p><strong>选项</strong>：用于指定URI路径、媒体类型（如JSON、CBOR）等参数，支持链式扩展。  </p></li><li><p><strong>负载</strong>：以<code>0xFF</code>分隔，支持多种数据格式。</p></li></ul><p><img src="/./IOT-Protocol-coap/image-20250526063657847.png" alt="image-20250526063657847"></p><p><strong>头部字段定义如下</strong>：</p><p>​<strong>版本号(Ver)：</strong>2-bit无符号整型，代表CoAP版本号。本文档的实现必须设置这个字段为0b01。其它的值为今后其它版本保留。对于带有未知版本号的消息，必须忽略。</p><p>​<strong>类型(T)：</strong>2-bit无符号整型。代表这个消息的类型是：CON(0), NON(1), ACK(2),或RST(3)。</p><p>​<strong>Token长度(TKL)：</strong>4-bit无符号整型。表示变长的Token字段(0-8字节）的长度。长度9-15是保留的，不能设置长度为9-15。如果设置了长度为9-15，必须被当作消息格式错误来处理。</p><p>​<strong>代码(Code)：</strong>8-bit无符号整型。拆分为3-bit的分类信息和5-bit详细信息。写作”c.dd”。c是3-bit长，可以是一个从0到7的数字，dd是5-bit长，它一个两位的数字，从00到31。分类信息c可以代表是一个请求（0），一个成功的响应（2），一个客户端错误响应（4），或者一个服务端错误响应（5）。所有其它的值都是保留的。代码0.00是一个特殊的情况，表示一个空的消息。当消息是一个请求时，Code字段表示请求方法。当响应时，Code字段代表响应代码。请求和响应的语义定义在第5章。</p><p>​<strong>消息ID(Message ID)：</strong>16-bit无符号整型，网络字节序。用于检测消息重复以及匹配ACK&#x2F;RST类型的消息和CON&#x2F;NON类型的消息。生成消息ID和匹配消息的规则在第4章中讲述。</p><p>​头部之后是<strong>Token值</strong>，可以有0到8个字节，由Token长度字段指定。这个Token值用于将某个请求和对应的响应关联。</p><p>​头部和Token之后，<strong>是0个或多个选项</strong>。一个选项之后，有可能是消息结束，也可能是另一个选项，也可能是payload标识符和payload部分。</p><p>​在头部、token和选项之后，是<strong>payload部分</strong>（可以没有payload）。如果有payload，并且长度不为0，那么payload之前有一个固定长度为一个字节的payload标识符（0xFF），它标志着选项部分的结束和payload部分的开始。payload部分从标识符之后开始，一直到这个UDP数据报结束，也就是说，payload部分的长度可以根据UDP数据报的长度计算出来。如果没有payload标识符，那么就代表这是一个0长度的payload。如果存在payload标识符但其后跟随的是0长度的payload，那么必须当作消息格式错误处理。</p><p>​实现注意：0xFF这个值有可能出现在一个选项的长度或选项的值中，所以简单的扫描0xFF来寻找payload标识符是不可行的。作为payload标识符的0xFF只可能出现在一个选项结束之后下一个选项有可能开始的地方。</p><p><strong>option的详细解析</strong></p><p>​CoAP定义了许多option。消息中的每个option都有一个option编号，option值长度，和option值。 消息中的option号（TLV格式中的T）并不是直接指定option编号的。所有的option必须按实际option编号的递增排列，某一个option和上一个option之间的option编号差值为delta；每一个TLV格式的option号都是delta值（数据包中第一个option的delta即它的option编号）。同一个编号的option再次出现时，delta的值为0。<br><img src="/./IOT-Protocol-coap/image-20250526064948717.png" alt="image-20250526064948717"></p><p>CoAP中所有的Option都采用编号的方式，这些Option及编号的定义如下图所示。<img src="/./IOT-Protocol-coap/image-20250526070635305.png" alt="image-20250526070635305"></p></li><li><p><strong>双层架构</strong>  </p><ul><li><strong>事务层</strong>：基于UDP处理消息传输，提供重传和拥塞控制。  </li><li><strong>请求&#x2F;响应层</strong>：封装资源操作逻辑，与HTTP语义兼容。</li></ul><p>​从逻辑上，可以把CoAP协议划分为两层：消息层，用于处理UDP数据包和异步；请求&#x2F;响应层，使用Method和Response Code，具体见图1。当然，CoAP是一个协议，消息和请求&#x2F;响应仅仅是其头部特性。</p><pre><code class="hljs">    +----------------------+    |      Application     |    +----------------------+    +----------------------+  \    |  Requests/Responses  |  |    |----------------------|  | CoAP    |       Messages       |  |    +----------------------+  /    +----------------------+    |          UDP         |    +----------------------+    图1 CoAP中的抽象层次</code></pre></li><li><p><strong>典型流程</strong>  </p><ul><li>设备通过<strong>CON报文</strong>注册到平台，发送数据或接收指令。  </li><li>使用<strong>NON报文</strong>发送心跳维持连接，减少网络负载。</li></ul></li></ol><hr><h2 id="Coap的消息类型"><a href="#Coap的消息类型" class="headerlink" title="Coap的消息类型"></a>Coap的消息类型</h2><p><strong>COAP协议有4种消息类型：</strong></p><ul><li>CON—— 需要被确认的请求，如果CON请求被发送，那么对方必须做出响应。这有点像TCP，对方必须给确认收到消息，用以可靠消息传输。</li><li>NON—— 不需要被确认的请求，如果NON请求被发送，那么对方不必做出回应。这适用于消息会重复频繁的发送，丢包不影响正常操作。这个和UDP很像。用以不可靠消息传输。</li><li>ACK —— 应答消息，对应的是CON消息的应答。</li><li>RST —— 复位消息，可靠传输时候接收的消息不认识或错误时，不能回ACK消息，必须回RST消息。</li></ul><h2 id="实践抓包分析"><a href="#实践抓包分析" class="headerlink" title="实践抓包分析"></a>实践抓包分析</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>我们需要进行下载一个Coap的客户端，这里我用的Coap_shell,下载链接放在下面了<br><code>链接: https://pan.baidu.com/s/1soGdqIlOBQe968_wezxq7Q 密码: rw6o</code></p><p>下载完之后在命令行运行<br><code>java -jar coap-shell.jar</code></p><p>可以用coap:&#x2F;&#x2F;coap.me作为测试服务器，输入下列命令连接服务器：<br><img src="/./IOT-Protocol-coap/image-20250526073545501.png" alt="image-20250526073545501"></p><p>wireshark的捕获方式使用的是WLAN<br><img src="/./IOT-Protocol-coap/image-20250526074148979.png" alt="image-20250526074148979"></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>运行discover,发现资源<br><img src="/./IOT-Protocol-coap/image-20250526074431703.png" alt="image-20250526074431703"></p><p>我们可以使用GET,POST,PUT,DELETE的请求方式进行资源的操作。</p><h4 id="以con类型为例"><a href="#以con类型为例" class="headerlink" title="以con类型为例"></a>以con类型为例</h4><p>我们先运行get &#x2F;hello<br><img src="/./IOT-Protocol-coap/image-20250526075038241.png" alt="image-20250526075038241"></p><p>使用wireshark抓包分析</p><p><img src="/./IOT-Protocol-coap/image-20250526074844346.png" alt="image-20250526074844346"></p><p>我们进入CON的报文类型中分析，对比一下上面图片的报文格式</p><ul><li>version是比特01</li><li>type是比特00，内容是confirmable</li><li>token length是比特1000</li></ul><p>这三个组成了一个字节</p><ul><li><p>code的请求方法是get</p></li><li><p>Message ID是355196是里两个字节</p></li><li><p>token一共是16个十六进制的数也就是8个字节</p></li></ul><p><img src="/./IOT-Protocol-coap/image-20250526075306891.png" alt="image-20250526075306891"></p><p>我们现在来看看option的部分<br>这个CON的消息类型中存在三个option选项，opt Delta的比特是0011，opt length的比特是0101，两个加一块正好是一个字节，符合下面的这个图，uri-host是属于option value，是7个字节，剩下的两个option也是如此。<br><img src="/./IOT-Protocol-coap/image-20250526081500420.png" alt="image-20250526081500420"></p><p><img src="/./IOT-Protocol-coap/image-20250526080951327.png" alt="image-20250526080951327"><br>这个con里面不存在payload，我们也可以看到没有0xff的十六进制。</p><h4 id="以ack类型为例"><a href="#以ack类型为例" class="headerlink" title="以ack类型为例"></a>以ack类型为例</h4><p>前面的分析就跳过了，直接步入payload的分析，我们可以看到0xff的后面就是payload的内容了，world，是五个字节的长度，正好是world的ascll码<br><img src="/./IOT-Protocol-coap/image-20250526082611509.png" alt="image-20250526082611509"></p><p><img src="/./IOT-Protocol-coap/image-20250526082048066.png" alt="image-20250526082048066"></p><p>​其他的请求方式，或RST,NON的类型就不分析了，我没时间去构造这样的情况了。反正分析起来就是如此了，想深入分析的话建议还是去建议看官方文档，那里面很详细，做协议开发的话还是得仔细看的，等到后卖面再用到的话再说吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>protocol</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOT_Protocol_MQTT</title>
    <link href="/IOT-Protocol-MQTT/"/>
    <url>/IOT-Protocol-MQTT/</url>
    
    <content type="html"><![CDATA[<h1 id="IOT协议之MQTT"><a href="#IOT协议之MQTT" class="headerlink" title="IOT协议之MQTT"></a>IOT协议之MQTT</h1><hr><p>​最近正在开始接触IOT的固件的漏洞挖掘，刚开始还是感觉很迷惑的，不知从哪里下手，我想还是边学习边复现，顺便把相关的常用的传输协议也学了吧，遂有了今天的这篇文章，以此做个记录。</p><hr><h2 id="1-什么是MQTT协议？"><a href="#1-什么是MQTT协议？" class="headerlink" title="1.什么是MQTT协议？"></a>1.什么是MQTT协议？</h2><p>​MQTT协议（Message Queuing Telemetry Transport，消息队列遥测传输协议）是一种基于发布&#x2F;订阅模式的轻量级通信协议，由IBM的Andy Stanford-Clark和Arlen Nipper于1999年发明，旨在为低带宽、高延迟或不稳定的网络环境设计，如物联网（IoT）设备之间的通信。</p><p>​<img src="/./IOT-Protocol-MQTT/image-20250524170116764.png" alt="image-20250524170116764"></p><p>​MQTT是一种基于TCP&#x2F;IP协议的轻量级通信协议，属于应用层协议，用于实现设备间的高效消息传输。位于OSI模型的第5至7层，其中第7层是应用层。</p><h3 id="1-1核心特点"><a href="#1-1核心特点" class="headerlink" title="1.1核心特点"></a>1.1核心特点</h3><ul><li>基于 TCP&#x2F;IP（应用层协议）。</li><li>低功耗、低开销（最小报文仅 2 字节）。</li><li>支持 QoS（服务质量等级）。</li><li>适合设备间异步通信。</li></ul><hr><h2 id="2-MQTT通信模型"><a href="#2-MQTT通信模型" class="headerlink" title="2.MQTT通信模型"></a>2.MQTT通信模型</h2><p>​MQTT采用<strong>发布&#x2F;订阅（Publish-Subscribe）模型</strong>，与传统的<strong>客户端&#x2F;服务器（Client-Server）模型</strong>（如HTTP）有本质区别。其核心思想是 <strong>解耦消息的发送者（Publisher）和接收者（Subscriber）</strong> ，通过代理服务器（Broker）实现高效、灵活的消息路由。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524233158429.png" alt="image-20250524233158429"></p><table><thead><tr><th><strong>角色</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>Publisher（发布者）</strong></td><td>向Broker发送消息的客户端（如传感器、设备）。</td></tr><tr><td><strong>Subscriber（订阅者）</strong></td><td>从Broker接收消息的客户端（如服务器、APP）。</td></tr><tr><td><strong>Broker（代理服务器）</strong></td><td>负责接收消息、过滤Topic，并将消息转发给订阅者（如Mosquitto、EMQX）。</td></tr><tr><td><strong>Topic（主题）</strong></td><td>消息的分类标识符，采用层级结构（如<code>sensor/temperature</code>）。</td></tr></tbody></table><h3 id="2-1MQTT通信流程"><a href="#2-1MQTT通信流程" class="headerlink" title="2. 1MQTT通信流程"></a>2. 1MQTT通信流程</h3><p><strong>第一步： 建立连接</strong></p><ol><li>Publisher&#x2F;Subscriber通过TCP连接到Broker。  </li><li>Publisher发送<code>CONNECT</code>报文，携带客户端ID、认证信息等。  </li><li>Broker回复<code>CONNACK</code>确认连接。</li></ol><p><strong>第二步：订阅Topic</strong></p><ul><li>Subscriber向Broker发送<code>SUBSCRIBE</code>报文，指定要监听的Topic（支持通配符）：  <ul><li><code>/sensor/temperature</code>：精确匹配  </li><li><code>/sensor/#</code>：匹配所有子主题（<code>#</code>为多级通配符）  </li><li><code>/+/humidity</code>：匹配单级通配符（<code>+</code>为单级通配符）</li></ul></li></ul><p><strong>第三步：发布消息</strong></p><ul><li>Publisher向Broker发送<code>PUBLISH</code>报文，包含：  <ul><li>Topic名称（如<code>sensor/temperature</code>）  </li><li>Payload（实际数据，如<code>25.5℃</code>）  </li><li>QoS级别（0&#x2F;1&#x2F;2）</li></ul></li><li>Broker根据Topic匹配规则，将消息推送给所有订阅者。</li></ul><p><strong>第四步：断开连接</strong></p><ul><li>Publisher或Subscriber发送<code>DISCONNECT</code>报文主动断开连接。</li></ul><hr><h3 id="2-2-MQTT-vs-HTTP模型对比"><a href="#2-2-MQTT-vs-HTTP模型对比" class="headerlink" title="2.2. MQTT vs. HTTP模型对比"></a>2.2. MQTT vs. HTTP模型对比</h3><table><thead><tr><th><strong>特性</strong></th><th>MQTT（发布&#x2F;订阅）</th><th>HTTP（请求&#x2F;响应）</th></tr></thead><tbody><tr><td><strong>耦合性</strong></td><td>完全解耦</td><td>强耦合（客户端必须主动请求）</td></tr><tr><td><strong>实时性</strong></td><td>Broker主动推送消息，实时性高</td><td>需轮询或长连接，延迟较高</td></tr><tr><td><strong>适用场景</strong></td><td>IoT、即时通讯、高频小数据</td><td>Web页面、文件传输</td></tr><tr><td><strong>网络开销</strong></td><td>协议头极小（最小2字节）</td><td>HTTP头较大（通常几百字节）</td></tr></tbody></table><h2 id="3-MQTT控制报文格式"><a href="#3-MQTT控制报文格式" class="headerlink" title="3.MQTT控制报文格式"></a>3.MQTT控制报文格式</h2><p>报文格式组成：固定报头（Fixed Header） 、 可变报头（Variable Header） 和 有效载荷（Payload），一共三部分。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524234700856.png" alt="image-20250524234700856"></p><h3 id="固定报头（Fixed-Header）"><a href="#固定报头（Fixed-Header）" class="headerlink" title="固定报头（Fixed Header）"></a>固定报头（Fixed Header）</h3><p>固定报头存在于所有MQTT报文中，是每个报文的必要部分，用于标识报文的类型及分组信息。<br>固定报头的格式如下：包括 标志位+报文类型+剩余长度</p><p><img src="/./IOT-Protocol-MQTT/image-20250524234937610.png" alt="image-20250524234937610"></p><p>报文类型：占用第一个字节的第4到7位，共4位，表示MQTT控制报文的类型</p><p><img src="/./IOT-Protocol-MQTT/image-20250524235118646.png" alt="image-20250524235118646"><br><img src="/./IOT-Protocol-MQTT/image-20250524235155671.png" alt="image-20250524235155671"></p><p>保留位（Reserved） ：占用第一个字节的第3到0位，共4位。通常保留为0，但在某些情况下可能用于特定功能</p><p><img src="/./IOT-Protocol-MQTT/image-20250524235505088.png" alt="image-20250524235505088"></p><p>​</p><p>剩余长度：占用第二个字节，表示固定报头和可变报头的总长度，也就是表示的在剩余长度之后的数据长度（还有多少个字节）。</p><p>​下面给大家讲一下计算的方法，这里需要说明一下，剩余长度的每一个字节的最高位是一个标志位，用来表示下一个字节是否也属于剩余长度，如果高位是1则表示下一个字节也是属于剩余长度，0则相反。<br>​计算长度的时候需要将每个字节的高位去掉，将高字节的</p><p>举个例子：这里剩余长度是第二个字节我就从第二个字节开始了</p><p>这里我们可以看到第三个字节是属于的，后面的字节就不是了，然后长度等于000 0001 010 0000&#x3D;160<br>懂了吧？很简单的，如果也有多字节，就以此类推。</p><table><thead><tr><th>第二个字节</th><th>第三个字节</th></tr></thead><tbody><tr><td>1010 0000</td><td>0000 0001</td></tr></tbody></table><h3 id="可变报头（Variable-Header）"><a href="#可变报头（Variable-Header）" class="headerlink" title="可变报头（Variable Header）"></a>可变报头（Variable Header）</h3><p>可变报头根据报文类型的不同而变化，存在于部分MQTT报文中。其主要作用是携带额外的信息，例如主题名称、消息ID、订阅过滤器等。<br>很多控制报文的可变报头部分包含一个两字节的报文标识符字段。这些报文是 PUBLISH（QoS&gt;0 时），PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE, SUBACK，UNSUBSCIBE，UNSUBACK。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525002531884.png" alt="image-20250525002531884"></p><p><img src="/./IOT-Protocol-MQTT/image-20250525002604353.png" alt="image-20250525002604353"></p><p>例如：</p><ul><li>SUBSCRIBE报文：包含订阅的主题列表和相应的QoS等级。</li><li>PUBLISH报文：包含主题名称和消息内容。</li><li>CONNECT报文：包含客户端标识符和协议版本等信息。</li></ul><h3 id="有效载荷（Payload）"><a href="#有效载荷（Payload）" class="headerlink" title="有效载荷（Payload）"></a>有效载荷（Payload）</h3><p>有效载荷是MQTT报文的核心部分，用于存储实际的数据内容。</p><p>例如：</p><ul><li>SUBSCRIBE报文：包含订阅的主题列表和相应的QoS等级。</li><li>PUBLISH报文：包含实际的消息内容，例如文本数据、图像数据等。</li><li>DISCONNECT报文：包含断开连接的请求信息。</li></ul><p><img src="/./IOT-Protocol-MQTT/image-20250525002851878.png" alt="image-20250525002851878"></p><h2 id="实践抓包分析"><a href="#实践抓包分析" class="headerlink" title="实践抓包分析"></a>实践抓包分析</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>​首先我们需要下载一个[wireshark](<a href="https://www.wireshark.org/download.html">Wireshark · Download</a>)用于抓MQTT包,一定要下载新的版本的，我看别人说老版本有些不支持mqtt协议，需要额外下载相关的插件，我就下载的新的，多一事不如少一事。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524230110030.png"></p><p>然后再下载一个[mqttx](<a href="https://www.emqx.com/zh/try?tab=more-products">免费试用 EMQX Cloud 或 EMQX Enterprise | 下载 EMQX</a>),一个全功能的开源 MQTT 客户端工具。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524231857860.png" alt="image-20250524231857860"></p><p>下载好之后就可以建立个链接，名称随便起，默认的mqtt协议端口就是1883,就可以保存连接远端服务器了。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524232032363.png" alt="image-20250524232032363"></p><p>对于wireshark的设置没什么了，因为我们是新版的所以就有些设置好了，捕获其记得用WLAN，因为我们要用主机与远端通信。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524232417301.png" alt="image-20250524232417301"></p><p>然后就可以点击捕获，同时把mqttx打开连接就可以还发现捕获到了mqtt协议了。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525003946280.png" alt="image-20250525003946280"></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>我们可以看到红色框起来的是tcp建立连接的三次握手</p><p><img src="/./IOT-Protocol-MQTT/image-20250525004036181.png" alt="image-20250525004036181"></p><h4 id="Connect协议类型"><a href="#Connect协议类型" class="headerlink" title="Connect协议类型"></a>Connect协议类型</h4><p>我们往下看，看到了mqtt的连接请求，我们首先分析第一个固定报头中的数据类型，发现是16进制的10也就是0001 0000，类型是connect，我们去上面查找类型表，和状态表，发现是一样的。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525010418783.png" alt="image-20250525010418783"><br><img src="/./IOT-Protocol-MQTT/image-20250525010444664.png" alt="image-20250525010444664"></p><p><img src="/./IOT-Protocol-MQTT/image-20250525005119469.png" alt="image-20250525005119469"><br><img src="/./IOT-Protocol-MQTT/image-20250525010052880.png" alt="image-20250525010052880"></p><p>msg len代表的是剩余长度，占一个字节</p><p><img src="/./IOT-Protocol-MQTT/image-20250525013000116.png" alt="image-20250525013000116"></p><p>下面是可变报文的内容：<br><img src="/./IOT-Protocol-MQTT/image-20250525014052924.png" alt="image-20250525014052924"></p><p>Connect报文的可变报头包含协议名，协议等级，连接标志和保持连接<br><img src="/./IOT-Protocol-MQTT/image-20250525013547391.png" alt="image-20250525013547391"></p><p>有效载荷：<br>CONNECT报文的有效载荷（payload）包含一个或多个以长度为前缀的字段，可变报头中的 标志决定是否包含这些字段。如果包含的话，必须按这个顺序出现：客户端标识符，遗嘱主题，遗嘱消息，用户名，密码。<br>客户端标识符(client identifier)：服务器通过识别客户标识符，确定客户端，识别两者间的MQTT会话相关状态，服务器允许客户端提供一个零字节的标识符，但clean session必须置1。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525014228237.png" alt="image-20250525014228237"></p><p>哎，时间有限，就先写这么多吧，其他的类型可以以此类推，记得每个报文类型的可变报文和有效负载的内容不同，具体的要去查资料。<br>最好是查官方的MQTT协议介绍。</p>]]></content>
    
    
    
    <tags>
      
      <tag>protocol</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
