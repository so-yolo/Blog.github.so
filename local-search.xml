<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IOT_Protocol_MQTT</title>
    <link href="/IOT-Protocol-MQTT/"/>
    <url>/IOT-Protocol-MQTT/</url>
    
    <content type="html"><![CDATA[<h1 id="IOT协议之MQTT"><a href="#IOT协议之MQTT" class="headerlink" title="IOT协议之MQTT"></a>IOT协议之MQTT</h1><hr><p>[TOC]</p><p>​</p><hr><p>​最近正在开始接触IOT的固件的漏洞挖掘，刚开始还是感觉很迷惑的，不知从哪里下手，我想还是边学习边复现，顺便把相关的常用的传输协议也学了吧，遂有了今天的这篇文章，以此做个记录。</p><hr><h2 id="1-什么是MQTT协议？"><a href="#1-什么是MQTT协议？" class="headerlink" title="1.什么是MQTT协议？"></a>1.什么是MQTT协议？</h2><p>​MQTT协议（Message Queuing Telemetry Transport，消息队列遥测传输协议）是一种基于发布&#x2F;订阅模式的轻量级通信协议，由IBM的Andy Stanford-Clark和Arlen Nipper于1999年发明，旨在为低带宽、高延迟或不稳定的网络环境设计，如物联网（IoT）设备之间的通信。</p><p>​<img src="/./IOT-Protocol-MQTT/image-20250524170116764.png" alt="image-20250524170116764"></p><p>​MQTT是一种基于TCP&#x2F;IP协议的轻量级通信协议，属于应用层协议，用于实现设备间的高效消息传输。位于OSI模型的第5至7层，其中第7层是应用层。</p><h3 id="1-1核心特点："><a href="#1-1核心特点：" class="headerlink" title="1.1核心特点："></a>1.1核心特点：</h3><ul><li>基于 TCP&#x2F;IP（应用层协议）。</li><li>低功耗、低开销（最小报文仅 2 字节）。</li><li>支持 QoS（服务质量等级）。</li><li>适合设备间异步通信。</li></ul><hr><h2 id="2-MQTT通信模型"><a href="#2-MQTT通信模型" class="headerlink" title="2.MQTT通信模型"></a>2.MQTT通信模型</h2><p>​MQTT采用<strong>发布&#x2F;订阅（Publish-Subscribe）模型</strong>，与传统的<strong>客户端&#x2F;服务器（Client-Server）模型</strong>（如HTTP）有本质区别。其核心思想是 <strong>解耦消息的发送者（Publisher）和接收者（Subscriber）</strong> ，通过代理服务器（Broker）实现高效、灵活的消息路由。</p><table><thead><tr><th><strong>角色</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>Publisher（发布者）</strong></td><td>向Broker发送消息的客户端（如传感器、设备）。</td></tr><tr><td><strong>Subscriber（订阅者）</strong></td><td>从Broker接收消息的客户端（如服务器、APP）。</td></tr><tr><td><strong>Broker（代理服务器）</strong></td><td>负责接收消息、过滤Topic，并将消息转发给订阅者（如Mosquitto、EMQX）。</td></tr><tr><td><strong>Topic（主题）</strong></td><td>消息的分类标识符，采用层级结构（如<code>sensor/temperature</code>）。</td></tr></tbody></table><h3 id="2-1MQTT通信流程"><a href="#2-1MQTT通信流程" class="headerlink" title="2. 1MQTT通信流程"></a>2. 1MQTT通信流程</h3><p><strong>第一步： 建立连接</strong></p><ol><li>Publisher&#x2F;Subscriber通过TCP连接到Broker。  </li><li>Publisher发送<code>CONNECT</code>报文，携带客户端ID、认证信息等。  </li><li>Broker回复<code>CONNACK</code>确认连接。</li></ol><p><strong>第二步：订阅Topic</strong></p><ul><li>Subscriber向Broker发送<code>SUBSCRIBE</code>报文，指定要监听的Topic（支持通配符）：  <ul><li><code>/sensor/temperature</code>：精确匹配  </li><li><code>/sensor/#</code>：匹配所有子主题（<code>#</code>为多级通配符）  </li><li><code>/+/humidity</code>：匹配单级通配符（<code>+</code>为单级通配符）</li></ul></li></ul><p><strong>第三步：发布消息</strong></p><ul><li>Publisher向Broker发送<code>PUBLISH</code>报文，包含：  <ul><li>Topic名称（如<code>sensor/temperature</code>）  </li><li>Payload（实际数据，如<code>25.5℃</code>）  </li><li>QoS级别（0&#x2F;1&#x2F;2）</li></ul></li><li>Broker根据Topic匹配规则，将消息推送给所有订阅者。</li></ul><p><strong>第四步：断开连接</strong></p><ul><li>Publisher或Subscriber发送<code>DISCONNECT</code>报文主动断开连接。</li></ul><hr><h3 id="2-2-MQTT-vs-HTTP通信模型对比"><a href="#2-2-MQTT-vs-HTTP通信模型对比" class="headerlink" title="2.2. MQTT vs. HTTP通信模型对比"></a>2.2. MQTT vs. HTTP通信模型对比</h3><table><thead><tr><th><strong>特性</strong></th><th>MQTT（发布&#x2F;订阅）</th><th>HTTP（请求&#x2F;响应）</th></tr></thead><tbody><tr><td><strong>耦合性</strong></td><td>完全解耦</td><td>强耦合（客户端必须主动请求）</td></tr><tr><td><strong>实时性</strong></td><td>Broker主动推送消息，实时性高</td><td>需轮询或长连接，延迟较高</td></tr><tr><td><strong>适用场景</strong></td><td>IoT、即时通讯、高频小数据</td><td>Web页面、文件传输</td></tr><tr><td><strong>网络开销</strong></td><td>协议头极小（最小2字节）</td><td>HTTP头较大（通常几百字节）</td></tr></tbody></table><h2 id="3-MQTT控制报文格式"><a href="#3-MQTT控制报文格式" class="headerlink" title="3.MQTT控制报文格式"></a>3.MQTT控制报文格式</h2><h2 id="抓包实践分析"><a href="#抓包实践分析" class="headerlink" title="抓包实践分析"></a>抓包实践分析</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>首先我们需要下载一个[wireshark](<a href="https://www.wireshark.org/download.html">Wireshark · Download</a>)用于抓MQTT包</p>]]></content>
    
    
    
    <tags>
      
      <tag>protocol</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
