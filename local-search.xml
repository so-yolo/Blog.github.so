<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IOT_Protocol_MQTT</title>
    <link href="/IOT-Protocol-MQTT/"/>
    <url>/IOT-Protocol-MQTT/</url>
    
    <content type="html"><![CDATA[<h1 id="IOT协议之MQTT"><a href="#IOT协议之MQTT" class="headerlink" title="IOT协议之MQTT"></a>IOT协议之MQTT</h1><hr><p>​最近正在开始接触IOT的固件的漏洞挖掘，刚开始还是感觉很迷惑的，不知从哪里下手，我想还是边学习边复现，顺便把相关的常用的传输协议也学了吧，遂有了今天的这篇文章，以此做个记录。</p><hr><h2 id="1-什么是MQTT协议？"><a href="#1-什么是MQTT协议？" class="headerlink" title="1.什么是MQTT协议？"></a>1.什么是MQTT协议？</h2><p>​MQTT协议（Message Queuing Telemetry Transport，消息队列遥测传输协议）是一种基于发布&#x2F;订阅模式的轻量级通信协议，由IBM的Andy Stanford-Clark和Arlen Nipper于1999年发明，旨在为低带宽、高延迟或不稳定的网络环境设计，如物联网（IoT）设备之间的通信。</p><p>​<img src="/./IOT-Protocol-MQTT/image-20250524170116764.png" alt="image-20250524170116764"></p><p>​MQTT是一种基于TCP&#x2F;IP协议的轻量级通信协议，属于应用层协议，用于实现设备间的高效消息传输。位于OSI模型的第5至7层，其中第7层是应用层。</p><h3 id="1-1核心特点"><a href="#1-1核心特点" class="headerlink" title="1.1核心特点"></a>1.1核心特点</h3><ul><li>基于 TCP&#x2F;IP（应用层协议）。</li><li>低功耗、低开销（最小报文仅 2 字节）。</li><li>支持 QoS（服务质量等级）。</li><li>适合设备间异步通信。</li></ul><hr><h2 id="2-MQTT通信模型"><a href="#2-MQTT通信模型" class="headerlink" title="2.MQTT通信模型"></a>2.MQTT通信模型</h2><p>​MQTT采用<strong>发布&#x2F;订阅（Publish-Subscribe）模型</strong>，与传统的<strong>客户端&#x2F;服务器（Client-Server）模型</strong>（如HTTP）有本质区别。其核心思想是 <strong>解耦消息的发送者（Publisher）和接收者（Subscriber）</strong> ，通过代理服务器（Broker）实现高效、灵活的消息路由。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524233158429.png" alt="image-20250524233158429"></p><table><thead><tr><th><strong>角色</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>Publisher（发布者）</strong></td><td>向Broker发送消息的客户端（如传感器、设备）。</td></tr><tr><td><strong>Subscriber（订阅者）</strong></td><td>从Broker接收消息的客户端（如服务器、APP）。</td></tr><tr><td><strong>Broker（代理服务器）</strong></td><td>负责接收消息、过滤Topic，并将消息转发给订阅者（如Mosquitto、EMQX）。</td></tr><tr><td><strong>Topic（主题）</strong></td><td>消息的分类标识符，采用层级结构（如<code>sensor/temperature</code>）。</td></tr></tbody></table><h3 id="2-1MQTT通信流程"><a href="#2-1MQTT通信流程" class="headerlink" title="2. 1MQTT通信流程"></a>2. 1MQTT通信流程</h3><p><strong>第一步： 建立连接</strong></p><ol><li>Publisher&#x2F;Subscriber通过TCP连接到Broker。  </li><li>Publisher发送<code>CONNECT</code>报文，携带客户端ID、认证信息等。  </li><li>Broker回复<code>CONNACK</code>确认连接。</li></ol><p><strong>第二步：订阅Topic</strong></p><ul><li>Subscriber向Broker发送<code>SUBSCRIBE</code>报文，指定要监听的Topic（支持通配符）：  <ul><li><code>/sensor/temperature</code>：精确匹配  </li><li><code>/sensor/#</code>：匹配所有子主题（<code>#</code>为多级通配符）  </li><li><code>/+/humidity</code>：匹配单级通配符（<code>+</code>为单级通配符）</li></ul></li></ul><p><strong>第三步：发布消息</strong></p><ul><li>Publisher向Broker发送<code>PUBLISH</code>报文，包含：  <ul><li>Topic名称（如<code>sensor/temperature</code>）  </li><li>Payload（实际数据，如<code>25.5℃</code>）  </li><li>QoS级别（0&#x2F;1&#x2F;2）</li></ul></li><li>Broker根据Topic匹配规则，将消息推送给所有订阅者。</li></ul><p><strong>第四步：断开连接</strong></p><ul><li>Publisher或Subscriber发送<code>DISCONNECT</code>报文主动断开连接。</li></ul><hr><h3 id="2-2-MQTT-vs-HTTP模型对比"><a href="#2-2-MQTT-vs-HTTP模型对比" class="headerlink" title="2.2. MQTT vs. HTTP模型对比"></a>2.2. MQTT vs. HTTP模型对比</h3><table><thead><tr><th><strong>特性</strong></th><th>MQTT（发布&#x2F;订阅）</th><th>HTTP（请求&#x2F;响应）</th></tr></thead><tbody><tr><td><strong>耦合性</strong></td><td>完全解耦</td><td>强耦合（客户端必须主动请求）</td></tr><tr><td><strong>实时性</strong></td><td>Broker主动推送消息，实时性高</td><td>需轮询或长连接，延迟较高</td></tr><tr><td><strong>适用场景</strong></td><td>IoT、即时通讯、高频小数据</td><td>Web页面、文件传输</td></tr><tr><td><strong>网络开销</strong></td><td>协议头极小（最小2字节）</td><td>HTTP头较大（通常几百字节）</td></tr></tbody></table><h2 id="3-MQTT控制报文格式"><a href="#3-MQTT控制报文格式" class="headerlink" title="3.MQTT控制报文格式"></a>3.MQTT控制报文格式</h2><p>报文格式组成：固定报头（Fixed Header） 、 可变报头（Variable Header） 和 有效载荷（Payload），一共三部分。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524234700856.png" alt="image-20250524234700856"></p><h3 id="固定报头（Fixed-Header）"><a href="#固定报头（Fixed-Header）" class="headerlink" title="固定报头（Fixed Header）"></a>固定报头（Fixed Header）</h3><p>固定报头存在于所有MQTT报文中，是每个报文的必要部分，用于标识报文的类型及分组信息。<br>固定报头的格式如下：包括 标志位+报文类型+剩余长度</p><p><img src="/./IOT-Protocol-MQTT/image-20250524234937610.png" alt="image-20250524234937610"></p><p>报文类型：占用第一个字节的第4到7位，共4位，表示MQTT控制报文的类型</p><p><img src="/./IOT-Protocol-MQTT/image-20250524235118646.png" alt="image-20250524235118646"><br><img src="/./IOT-Protocol-MQTT/image-20250524235155671.png" alt="image-20250524235155671"></p><p>保留位（Reserved） ：占用第一个字节的第3到0位，共4位。通常保留为0，但在某些情况下可能用于特定功能</p><p><img src="/./IOT-Protocol-MQTT/image-20250524235505088.png" alt="image-20250524235505088"></p><p>​</p><p>剩余长度：占用第二个字节，表示固定报头和可变报头的总长度，也就是表示的在剩余长度之后的数据长度（还有多少个字节）。</p><p>​下面给大家讲一下计算的方法，这里需要说明一下，剩余长度的每一个字节的最高位是一个标志位，用来表示下一个字节是否也属于剩余长度，如果高位是1则表示下一个字节也是属于剩余长度，0则相反。<br>​计算长度的时候需要将每个字节的高位去掉，将高字节的</p><p>举个例子：这里剩余长度是第二个字节我就从第二个字节开始了</p><p>这里我们可以看到第三个字节是属于的，后面的字节就不是了，然后长度等于000 0001 010 0000&#x3D;160<br>懂了吧？很简单的，如果也有多字节，就以此类推。</p><table><thead><tr><th>第二个字节</th><th>第三个字节</th></tr></thead><tbody><tr><td>1010 0000</td><td>0000 0001</td></tr></tbody></table><h3 id="可变报头（Variable-Header）"><a href="#可变报头（Variable-Header）" class="headerlink" title="可变报头（Variable Header）"></a>可变报头（Variable Header）</h3><p>可变报头根据报文类型的不同而变化，存在于部分MQTT报文中。其主要作用是携带额外的信息，例如主题名称、消息ID、订阅过滤器等。<br>很多控制报文的可变报头部分包含一个两字节的报文标识符字段。这些报文是 PUBLISH（QoS&gt;0 时），PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE, SUBACK，UNSUBSCIBE，UNSUBACK。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525002531884.png" alt="image-20250525002531884"></p><p><img src="/./IOT-Protocol-MQTT/image-20250525002604353.png" alt="image-20250525002604353"></p><p>例如：</p><ul><li>SUBSCRIBE报文：包含订阅的主题列表和相应的QoS等级。</li><li>PUBLISH报文：包含主题名称和消息内容。</li><li>CONNECT报文：包含客户端标识符和协议版本等信息。</li></ul><h3 id="有效载荷（Payload）"><a href="#有效载荷（Payload）" class="headerlink" title="有效载荷（Payload）"></a>有效载荷（Payload）</h3><p>有效载荷是MQTT报文的核心部分，用于存储实际的数据内容。</p><p>例如：</p><ul><li>SUBSCRIBE报文：包含订阅的主题列表和相应的QoS等级。</li><li>PUBLISH报文：包含实际的消息内容，例如文本数据、图像数据等。</li><li>DISCONNECT报文：包含断开连接的请求信息。</li></ul><p><img src="/./IOT-Protocol-MQTT/image-20250525002851878.png" alt="image-20250525002851878"></p><h2 id="实践抓包分析"><a href="#实践抓包分析" class="headerlink" title="实践抓包分析"></a>实践抓包分析</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>​首先我们需要下载一个[wireshark](<a href="https://www.wireshark.org/download.html">Wireshark · Download</a>)用于抓MQTT包,一定要下载新的版本的，我看别人说老版本有些不支持mqtt协议，需要额外下载相关的插件，我就下载的新的，多一事不如少一事。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524230110030.png"></p><p>然后再下载一个[mqttx](<a href="https://www.emqx.com/zh/try?tab=more-products">免费试用 EMQX Cloud 或 EMQX Enterprise | 下载 EMQX</a>),一个全功能的开源 MQTT 客户端工具。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524231857860.png" alt="image-20250524231857860"></p><p>下载好之后就可以建立个链接，名称随便起，默认的mqtt协议端口就是1883,就可以保存连接远端服务器了。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524232032363.png" alt="image-20250524232032363"></p><p>对于wireshark的设置没什么了，因为我们是新版的所以就有些设置好了，捕获其记得用WLAN，因为我们要用主机与远端通信。</p><p><img src="/./IOT-Protocol-MQTT/image-20250524232417301.png" alt="image-20250524232417301"></p><p>然后就可以点击捕获，同时把mqttx打开连接就可以还发现捕获到了mqtt协议了。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525003946280.png" alt="image-20250525003946280"></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>我们可以看到红色框起来的是tcp建立连接的三次握手</p><p><img src="/./IOT-Protocol-MQTT/image-20250525004036181.png" alt="image-20250525004036181"></p><h4 id="Connect协议类型"><a href="#Connect协议类型" class="headerlink" title="Connect协议类型"></a>Connect协议类型</h4><p>我们往下看，看到了mqtt的连接请求，我们首先分析第一个固定报头中的数据类型，发现是16进制的10也就是0001 0000，类型是connect，我们去上面查找类型表，和状态表，发现是一样的。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525010418783.png" alt="image-20250525010418783"><br><img src="/./IOT-Protocol-MQTT/image-20250525010444664.png" alt="image-20250525010444664"></p><p><img src="/./IOT-Protocol-MQTT/image-20250525005119469.png" alt="image-20250525005119469"><br><img src="/./IOT-Protocol-MQTT/image-20250525010052880.png" alt="image-20250525010052880"></p><p>msg len代表的是剩余长度，占一个字节</p><p><img src="/./IOT-Protocol-MQTT/image-20250525013000116.png" alt="image-20250525013000116"></p><p>下面是可变报文的内容：<br><img src="/./IOT-Protocol-MQTT/image-20250525014052924.png" alt="image-20250525014052924"></p><p>Connect报文的可变报头包含协议名，协议等级，连接标志和保持连接<br><img src="/./IOT-Protocol-MQTT/image-20250525013547391.png" alt="image-20250525013547391"></p><p>有效载荷：<br>CONNECT报文的有效载荷（payload）包含一个或多个以长度为前缀的字段，可变报头中的 标志决定是否包含这些字段。如果包含的话，必须按这个顺序出现：客户端标识符，遗嘱主题，遗嘱消息，用户名，密码。<br>客户端标识符(client identifier)：服务器通过识别客户标识符，确定客户端，识别两者间的MQTT会话相关状态，服务器允许客户端提供一个零字节的标识符，但clean session必须置1。</p><p><img src="/./IOT-Protocol-MQTT/image-20250525014228237.png" alt="image-20250525014228237"></p><p>哎，时间有限，就先写这么多吧，其他的类型可以以此类推，记得每个报文类型的可变报文和有效负载的内容不同，具体的要去查资料。<br>最好是查官方的MQTT协议介绍。</p>]]></content>
    
    
    
    <tags>
      
      <tag>protocol</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
